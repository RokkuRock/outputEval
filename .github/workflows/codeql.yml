# CodeQL Advanced Configuration for Memory Safety Analysis
# Optimized for detecting double-free and use-after-free vulnerabilities

name: "CodeQL Advanced Security Analysis"

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  schedule:
    - cron: '32 3 * * 1'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: 60
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: manual

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # 設置編译環境
    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc g++ libc6-dev

    # 初始化 CodeQL
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # 使用擴展的安全查詢集，專門針對記憶體安全問題
        queries: |
          security-extended
          security-and-quality
        # 自定義配置以提高記憶體漏洞檢測精度
        config: |
          name: "Advanced Memory Safety Analysis"
          queries:
            - uses: security-extended
            - uses: security-and-quality
          paths-ignore:
            - "**/*.md"
            - "**/docs/**"
          paths:
            - src
            - "**/*.c"
            - "**/*.cpp"
            - "**/*.h"
            - "**/*.hpp"

    # 手動建置步驟 - 專門針對記憶體管理漏洞分析
    - if: matrix.build-mode == 'manual'
      name: Manual build for memory analysis
      shell: bash
      run: |
        echo "=== CodeQL Memory Safety Analysis Setup ==="
        echo "Scanning for C/C++ files..."
        
        # 列出所有要分析的源文件
        find . -name "*.c" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | while read file; do
          echo "Found: $file"
        done
        
        echo "=== Compiling files for CodeQL analysis ==="
        
        # 設置編譯選項以最大化 CodeQL 的分析能力
        export CFLAGS="-g -O0 -fno-omit-frame-pointer -fno-optimize-sibling-calls"
        export CPPFLAGS="-g -O0 -fno-omit-frame-pointer -fno-optimize-sibling-calls"
        
        # 編譯所有 C 文件
        for file in $(find . -name "*.c" -type f); do
          echo "Compiling C file: $file"
          filename=$(basename "$file" .c)
          
          # 使用詳細的編譯選項來幫助 CodeQL 分析
          gcc -g -O0 -Wall -Wextra -fno-omit-frame-pointer \
              -fstack-protector-all -D_FORTIFY_SOURCE=2 \
              -c "$file" -o "${filename}.o" 2>&1 | tee "compile_${filename}.log" || true
          
          # 也嘗試創建可執行文件（如果可能的話）
          if [ -f "${filename}.o" ]; then
            gcc -g -O0 "${filename}.o" -o "${filename}" 2>/dev/null || echo "Note: Could not create executable for $file (normal for analysis)"
          fi
        done
        
        # 編譯所有 C++ 文件
        for file in $(find . -name "*.cpp" -type f); do
          echo "Compiling C++ file: $file"
          filename=$(basename "$file" .cpp)
          
          g++ -g -O0 -Wall -Wextra -fno-omit-frame-pointer \
              -fstack-protector-all -D_FORTIFY_SOURCE=2 \
              -c "$file" -o "${filename}.o" 2>&1 | tee "compile_${filename}.log" || true
          
          if [ -f "${filename}.o" ]; then
            g++ -g -O0 "${filename}.o" -o "${filename}" 2>/dev/null || echo "Note: Could not create executable for $file (normal for analysis)"
          fi
        done
        
        echo "=== Analysis preparation completed ==="
        echo "Generated object files:"
        ls -la *.o 2>/dev/null || echo "No object files generated"
        
        # 顯示編譯日誌摘要
        echo "=== Compilation summary ==="
        for log in compile_*.log; do
          if [ -f "$log" ]; then
            echo "--- $log ---"
            head -10 "$log"
          fi
        done

    # 執行 CodeQL 分析
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "memory-safety-${{matrix.language}}"
        # 上傳所有結果，不過濾低嚴重性問題
        upload: "always"

    # 生成詳細報告
    - name: Generate analysis report
      if: always()
      run: |
        echo "=== CodeQL Analysis Completed ==="
        echo "Check the Security tab in your GitHub repository for detailed results"
        echo "Focus areas for this analysis:"
        echo "- Double-free vulnerabilities"
        echo "- Use-after-free vulnerabilities" 
        echo "- Memory leaks"
        echo "- Buffer overflows"
        echo "- Implicit function declarations"
