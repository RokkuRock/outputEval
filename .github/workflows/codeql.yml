# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Advanced Multi-Language"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '32 3 * * 1'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: 120  # 增加超時時間以支持多語言分析
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: manual
        - language: java-kotlin
          build-mode: none
        - language: python
          build-mode: none
        - language: csharp
          build-mode: manual
        # CodeQL supports the following values keywords for 'language': 'actions', 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Setup Java for Java/Kotlin analysis
    - if: matrix.language == 'java-kotlin'
      name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # Setup Python for Python analysis
    - if: matrix.language == 'python'
      name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Setup .NET for C# analysis
    - if: matrix.language == 'csharp'
      name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        queries: security-extended,security-and-quality

    # C/C++ 手動建置步驟 - 針對靜態分析優化
    - if: matrix.build-mode == 'manual'
      name: Manual build for C/C++
      shell: bash
      run: |
        echo "Setting up for static analysis of C/C++ code"
        echo "Files to be analyzed:"
        find . -name "*.c" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | head -20
        
        # 為了讓 CodeQL 能夠分析，我們進行詳細的編譯檢查
        # 使用優化的編譯選項來最大化 CodeQL 的分析能力
        echo "Performing enhanced compilation for CodeQL analysis..."
        
        # 設置編譯環境變數
        export CFLAGS="-g -O0 -fno-omit-frame-pointer -Wall -Wextra"
        export CPPFLAGS="-g -O0 -fno-omit-frame-pointer -Wall -Wextra"
        
        # 編譯所有 C 文件（使用詳細選項）
        for file in $(find . -name "*.c"); do
          echo "Processing C file: $file"
          filename=$(basename "$file" .c)
          
          # 編譯成目標文件，保留調試信息
          gcc -g -O0 -fno-omit-frame-pointer -Wall -Wextra \
              -c "$file" -o "${filename}.o" 2>&1 || echo "Note: $file compilation issues (normal for analysis)"
          
          # 嘗試編譯成可執行文件以完整分析
          gcc -g -O0 -fno-omit-frame-pointer "$file" -o "${filename}" 2>/dev/null || echo "Note: executable creation skipped for $file"
        done
        
        # 編譯所有 C++ 文件（使用詳細選項）
        for file in $(find . -name "*.cpp"); do
          echo "Processing C++ file: $file"
          filename=$(basename "$file" .cpp)
          
          # 編譯成目標文件，保留調試信息
          g++ -g -O0 -fno-omit-frame-pointer -Wall -Wextra \
              -c "$file" -o "${filename}.o" 2>&1 || echo "Note: $file compilation issues (normal for analysis)"
          
          # 嘗試編譯成可執行文件以完整分析
          g++ -g -O0 -fno-omit-frame-pointer "$file" -o "${filename}" 2>/dev/null || echo "Note: executable creation skipped for $file"
        done
        
        echo "Enhanced compilation setup completed"
        echo "Generated files for analysis:"
        ls -la *.o 2>/dev/null || echo "No object files created"

    # Java 建置步驟
    - if: matrix.language == 'java-kotlin'
      name: Build Java project
      shell: bash
      run: |
        echo "Building Java project for CodeQL analysis..."
        
        # 檢查並列出 Java 文件
        echo "Java files to be analyzed:"
        find . -name "*.java" -o -name "*.kt" | head -20
        
        # 嘗試使用 Maven 建置
        if [ -f "pom.xml" ]; then
          echo "Found Maven project, building with Maven..."
          mvn clean compile -DskipTests || echo "Maven build completed with issues"
        # 嘗試使用 Gradle 建置
        elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
          echo "Found Gradle project, building with Gradle..."
          ./gradlew build -x test || echo "Gradle build completed with issues"
        else
          echo "No Maven or Gradle project found, compiling Java files manually..."
          # 手動編譯 Java 文件
          for file in $(find . -name "*.java"); do
            echo "Compiling Java file: $file"
            javac -cp ".:*" "$file" || echo "Note: $file compilation issues (normal for analysis)"
          done
        fi

    # Python 環境設置
    - if: matrix.language == 'python'
      name: Setup Python environment
      shell: bash
      run: |
        echo "Setting up Python environment for CodeQL analysis..."
        
        # 檢查並列出 Python 文件
        echo "Python files to be analyzed:"
        find . -name "*.py" | head -20
        
        # 安裝常用依賴
        if [ -f "requirements.txt" ]; then
          echo "Installing requirements from requirements.txt..."
          pip install -r requirements.txt || echo "Requirements installation completed with issues"
        fi
        
        if [ -f "setup.py" ]; then
          echo "Installing package in development mode..."
          pip install -e . || echo "Package installation completed with issues"
        fi
        
        # 編譯 Python 文件以檢查語法
        echo "Checking Python syntax..."
        python -m py_compile $(find . -name "*.py") || echo "Python syntax check completed"

    # C# 手動建置步驟
    - if: matrix.language == 'csharp'
      name: Manual build for C#
      shell: bash
      run: |
        echo "=== C# Manual Build Setup ==="
        echo "Working directory: $(pwd)"
        echo "Available .NET versions:"
        dotnet --list-sdks || echo "No .NET SDKs found"
        
        echo "=== Searching for C# files ==="
        CS_FILES=$(find . -name "*.cs" -type f | wc -l)
        echo "Found $CS_FILES C# files:"
        find . -name "*.cs" -type f | head -10
        
        echo "=== Searching for project files ==="
        SLN_FILES=$(find . -name "*.sln" -type f | wc -l)
        CSPROJ_FILES=$(find . -name "*.csproj" -type f | wc -l)
        echo "Found $SLN_FILES solution files and $CSPROJ_FILES project files"
        
        # 如果沒有找到任何 C# 文件，跳出
        if [ $CS_FILES -eq 0 ]; then
          echo "No C# files found - skipping C# build"
          exit 0
        fi
        
        BUILD_SUCCESS=false
        
        # 嘗試建置 .sln 文件
        if [ $SLN_FILES -gt 0 ]; then
          echo "=== Building solution files ==="
          for sln in $(find . -name "*.sln" -type f); do
            echo "Attempting to build solution: $sln"
            if dotnet restore "$sln" && dotnet build "$sln" --no-restore --configuration Release --verbosity minimal; then
              echo "Successfully built solution: $sln"
              BUILD_SUCCESS=true
              break
            else
              echo "Failed to build solution: $sln"
            fi
          done
        fi
        
        # 如果解決方案建置失敗，嘗試建置 .csproj 文件
        if [ "$BUILD_SUCCESS" = false ] && [ $CSPROJ_FILES -gt 0 ]; then
          echo "=== Building project files ==="
          for proj in $(find . -name "*.csproj" -type f); do
            echo "Attempting to build project: $proj"
            if dotnet restore "$proj" && dotnet build "$proj" --no-restore --configuration Release --verbosity minimal; then
              echo "Successfully built project: $proj"
              BUILD_SUCCESS=true
            else
              echo "Failed to build project: $proj"
            fi
          done
        fi
        
        # 如果所有建置都失敗，創建臨時專案
        if [ "$BUILD_SUCCESS" = false ]; then
          echo "=== Creating temporary project for C# analysis ==="
          
          # 創建臨時目錄
          mkdir -p temp_csharp_analysis
          cd temp_csharp_analysis
          
          # 複製所有 C# 文件到臨時目錄
          find .. -name "*.cs" -type f -exec cp {} . \; 2>/dev/null || true
          
          # 創建簡單的 csproj 文件
          cat > TempAnalysis.csproj << 'EOF'
        <Project Sdk="Microsoft.NET.Sdk">
          <PropertyGroup>
            <TargetFramework>net8.0</TargetFramework>
            <OutputType>Library</OutputType>
            <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
            <Deterministic>false</Deterministic>
          </PropertyGroup>
          <ItemGroup>
            <Compile Include="*.cs" />
          </ItemGroup>
        </Project>
        EOF
          
          echo "Created temporary project with $(ls *.cs 2>/dev/null | wc -l) C# files"
          
          # 嘗試建置臨時專案
          if dotnet restore TempAnalysis.csproj && dotnet build TempAnalysis.csproj --no-restore --configuration Release --verbosity minimal; then
            echo "Successfully built temporary C# project"
            BUILD_SUCCESS=true
          else
            echo "Failed to build temporary project, trying compilation without restore..."
            # 最後嘗試：直接編譯而不進行 restore
            if dotnet build TempAnalysis.csproj --configuration Release --verbosity minimal; then
              echo "Successfully built temporary C# project without restore"
              BUILD_SUCCESS=true
            fi
          fi
          
          cd ..
        fi
        
        if [ "$BUILD_SUCCESS" = true ]; then
          echo "=== C# Build completed successfully ==="
        else
          echo "=== C# Build failed, but CodeQL may still be able to perform partial analysis ==="
        fi

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "enhanced-scan-${{matrix.language}}"
        upload: "always"
